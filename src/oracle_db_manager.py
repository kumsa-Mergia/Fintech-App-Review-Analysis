import cx_Oracle
import pandas as pd

class OracleDBManager:
    def __init__(self, user, password, dsn):
        self.user = user
        self.password = password
        self.dsn = dsn
        self.connection = None
        self.cursor = None

    def connect(self):
        try:
            self.connection = cx_Oracle.connect(self.user, self.password, self.dsn)
            self.cursor = self.connection.cursor()
            print(" Connected to Oracle DB.")
        except cx_Oracle.Error as e:
            print(f" Connection error: {e}")
            raise

    def close(self):
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
            print(" Connection closed.")


    def create_tables(self):
        self.cursor.execute("""
            CREATE TABLE banks (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR2(255) NOT NULL UNIQUE
            )
        """)
        self.cursor.execute("""
            CREATE TABLE reviews (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                bank_id NUMBER REFERENCES banks(id),
                rating NUMBER(2,1),
                review_text CLOB,
                review_date DATE,
                source VARCHAR2(100)
            )
        """)
        print(" Tables created.")

    def insert_banks(self, bank_names):
        bank_id_map = {}
        for name in bank_names:
            try:
                bank_id_var = self.cursor.var(cx_Oracle.NUMBER)
                self.cursor.execute(
                    "INSERT INTO banks (name) VALUES (:1) RETURNING id INTO :2",
                    [name, bank_id_var]
                )
                bank_id_map[name] = int(bank_id_var.getvalue()[0])
            except cx_Oracle.IntegrityError:
                # Get the ID if the bank already exists
                self.cursor.execute("SELECT id FROM banks WHERE name = :1", [name])
                bank_id_map[name] = self.cursor.fetchone()[0]
        self.connection.commit()
        return bank_id_map

    def insert_reviews(self, df, bank_id_map):
        for _, row in df.iterrows():
            self.cursor.execute("""
                INSERT INTO reviews (bank_id, rating, review_text, review_date, source)
                VALUES (:1, :2, :3, TO_DATE(:4, 'YYYY-MM-DD'), :5)
            """, [
                bank_id_map[row['bank']],
                row['rating'],
                row['review'],
                row['date'],
                row['source']
            ])
        self.connection.commit()
        print(" Reviews inserted.")
